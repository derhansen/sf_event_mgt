#==============================================
# FE-Plugin configuration
#==============================================
plugin.tx_sfeventmgt {
    mvc.callDefaultActionIfActionCantBeResolved = 1
    persistence.updateReferenceIndex = 1
    view {
        templateRootPaths {
            0 = EXT:sf_event_mgt/Resources/Private/Templates/
            1 = {$plugin.tx_sfeventmgt.view.templateRootPath}
        }
        partialRootPaths {
            0 = EXT:sf_event_mgt/Resources/Private/Partials/
            1 = {$plugin.tx_sfeventmgt.view.partialRootPath}
        }
        layoutRootPaths {
            0 = EXT:sf_event_mgt/Resources/Private/Layouts/
            1 = {$plugin.tx_sfeventmgt.view.layoutRootPath}
        }
    }
    settings {
        orderFieldAllowed = uid,title,teaser,startdate,enddate,price,tstamp,crdate,category.title,location.title,location.city,location.country
        list {
            format = html
            rss {
                channel {
                    title = {$plugin.tx_sfeventmgt.rss.channel.title}
                    description = {$plugin.tx_sfeventmgt.rss.channel.description}
                    language = {$plugin.tx_sfeventmgt.rss.channel.language}
                    copyright = {$plugin.tx_sfeventmgt.rss.channel.copyright}
                    generator = {$plugin.tx_sfeventmgt.rss.channel.generator}
                    link = {$plugin.tx_sfeventmgt.rss.channel.link}
                    typeNum = {$plugin.tx_sfeventmgt.rss.channel.typeNum}
                }
            }
        }
        calendar {
            firstDayOfWeek = 1
            includeEventsForEveryDayOfAllCalendarWeeks = 1
            showWeekNumber = 1
        }
        detail {
            checkPidOfEventRecord = 0
            imageWidth = 200
            imageHeight =
            isShortcut = 0
        }
        registration {
            checkPidOfEventRecord = 0
            autoConfirmation = {$plugin.tx_sfeventmgt.settings.registration.autoConfirmation}
            deleteExpiredRegistrations = {$plugin.tx_sfeventmgt.settings.registration.deleteExpiredRegistrations}
            formatDateOfBirth = {$plugin.tx_sfeventmgt.settings.registration.formatDateOfBirth}
            # The fields firstname, lastname and email are always required and cannot be overridden
            requiredFields =
            # Prefill fields - registration field = fe_user field
            prefillFields {
                firstname = first_name
                lastname = last_name
                address = address
                zip = zip
                city = city
                country = country
                email = email
                phone = telephone
                gender = gender
            }
            spamCheck {
                enabled = 1
                maxSpamScore = 10
                checks {
                    honeypot {
                        enabled = 1
                        name = Honeypot field check
                        class = DERHANSEN\SfEventMgt\SpamChecks\HoneypotSpamCheck
                        increaseScore = 10
                        configuration {
                            renderAsHiddenField = 0
                        }
                    }
                    link {
                        enabled = 0
                        name = Amount of links submitted registration
                        class = DERHANSEN\SfEventMgt\SpamChecks\LinkSpamCheck
                        increaseScore = 3
                        configuration {
                            maxAmountOfLinks = 2
                        }
                    }
                    challengeResponse {
                        enabled = 0
                        name = Challenge/Response check (JavaScript required) using ROT13 encryption/obfuscation
                        class = DERHANSEN\SfEventMgt\SpamChecks\ChallengeResponseSpamCheck
                        increaseScore = 10
                        configuration {
                            prefix = SfEventMgt
                            postfix = TYPO3
                        }
                    }
                }
            }
            captcha {
                enabled = {$plugin.tx_sfeventmgt.settings.registration.captcha.enabled}
                type = {$plugin.tx_sfeventmgt.settings.registration.captcha.type}
                reCaptcha {
                    apiScript = https://www.google.com/recaptcha/api.js
                    verificationServer = https://www.google.com/recaptcha/api/siteverify
                    siteKey = {$plugin.tx_sfeventmgt.settings.registration.captcha.reCaptcha.siteKey}
                    secretKey = {$plugin.tx_sfeventmgt.settings.registration.captcha.reCaptcha.secretKey}
                }
                hCaptcha {
                    apiScript = https://hcaptcha.com/1/api.js
                    verificationServer = https://hcaptcha.com/siteverify
                    publicKey = {$plugin.tx_sfeventmgt.settings.registration.captcha.hCaptcha.publicKey}
                    privateKey = {$plugin.tx_sfeventmgt.settings.registration.captcha.hCaptcha.privateKey}
                }
                bwCaptcha < plugin.tx_bwcaptcha.settings
            }
        }
        waitlist {
            moveUp {
                keepMainRegistrationDependency = 0
            }
        }
        confirmation {
            linkValidity = {$plugin.tx_sfeventmgt.settings.confirmation.linkValidity}
            additionalVerificationStep = {$plugin.tx_sfeventmgt.settings.confirmation.additionalVerificationStep}
        }
        cancellation {
            additionalVerificationStep = {$plugin.tx_sfeventmgt.settings.cancellation.additionalVerificationStep}
        }
        event {
            errorHandling = showStandaloneTemplate,EXT:sf_event_mgt/Resources/Private/Templates/Event/EventNotFound.html,404
        }
        notification {
            senderEmail = {$plugin.tx_sfeventmgt.settings.notification.senderEmail}
            senderName = {$plugin.tx_sfeventmgt.settings.notification.senderName}
            senderSignature = {$plugin.tx_sfeventmgt.settings.notification.senderSignature}
            replyToEmail = {$plugin.tx_sfeventmgt.settings.notification.replyToEmail}
            adminEmail = {$plugin.tx_sfeventmgt.settings.notification.adminEmail}
            registrationDataAsSenderForAdminEmails = {$plugin.tx_sfeventmgt.settings.notification.registrationDataAsSenderForAdminEmails}
            disabled = {$plugin.tx_sfeventmgt.settings.notification.disabled}
            registrationNew {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationNew.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationNew.adminSubject}
            }
            registrationWaitlistNew {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistNew.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistNew.adminSubject}
            }
            registrationConfirmed {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationConfirmed.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationConfirmed.adminSubject}
            }
            registrationWaitlistConfirmed {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistConfirmed.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistConfirmed.adminSubject}
            }
            registrationCancelled {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationCancelled.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationCancelled.adminSubject}
            }
            registrationWaitlistMoveUp {
                userSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistMoveUp.userSubject}
                adminSubject = {$plugin.tx_sfeventmgt.settings.notification.registrationWaitlistMoveUp.adminSubject}
            }
        }
        search {
            fields = {$plugin.tx_sfeventmgt.settings.search.fields}
            dateFormat = {$plugin.tx_sfeventmgt.settings.search.dateFormat}
            adjustTime = {$plugin.tx_sfeventmgt.settings.search.adjustTime}
        }
        pagination {
          enablePagination = 0
          itemsPerPage = 10
          maxNumPages = 10
        }
    }
}

#==============================================
# BE-module configuration for EXT:sf_event_mgt
#==============================================
module.tx_sfeventmgt {
    view < plugin.tx_sfeventmgt.view
    settings {
        orderFieldAllowed < plugin.tx_sfeventmgt.settings.orderFieldAllowed
        csvExport {
            showFlashMessageForInsufficientAccessRights = 1
            fields = {$module.tx_sfeventmgt.settings.csvExport.fields}
            fieldDelimiter = {$module.tx_sfeventmgt.settings.csvExport.fieldDelimiter}
            fieldQuoteCharacter = {$module.tx_sfeventmgt.settings.csvExport.fieldQuoteCharacter}
            prependBOM = {$module.tx_sfeventmgt.settings.csvExport.prependBOM}
            dateFieldFormat = {$module.tx_sfeventmgt.settings.csvExport.dateFieldFormat}
        }
        search {
            fields = {$module.tx_sfeventmgt.settings.search.fields}
        }
        registration {
            deleteExpiredRegistrations = {$plugin.tx_sfeventmgt.settings.registration.deleteExpiredRegistrations}
        }
        notification {
            senderEmail = {$plugin.tx_sfeventmgt.settings.notification.senderEmail}
            senderName = {$plugin.tx_sfeventmgt.settings.notification.senderName}
            senderSignature = {$plugin.tx_sfeventmgt.settings.notification.senderSignature}
            disabled = {$plugin.tx_sfeventmgt.settings.notification.disabled}
            customNotifications {
                thanksForParticipation {
                    title = Thank you message
                    template = ThanksForParticipation.html
                    subject = Thank you for participation in event "{event.title}"
                }
            }
        }
        enabledActions {
            notify = 1
            export = 1
        }
        defaultSorting {
          orderField = title
          orderDirection = asc
        }
        pagination {
            enablePagination = 1
            itemsPerPage = 10
            maxNumPages = 10
        }
    }
}

#==============================================
# Rendering of events, displayed by "Insert Record" content element
#==============================================
tt_content.shortcut.20.tables := addToList(tx_sfeventmgt_domain_model_event)
tt_content.shortcut.20.conf.tx_sfeventmgt_domain_model_event = EXTBASEPLUGIN
tt_content.shortcut.20.conf.tx_sfeventmgt_domain_model_event {
  extensionName = SfEventMgt
  pluginName = Pieventdetail
  settings =< plugin.tx_sfeventmgt.settings
  settings.detail.isShortcut = 1
}

# For fluid_styled_content
tt_content.shortcut.variables.shortcuts.tables := addToList(tx_sfeventmgt_domain_model_event)
tt_content.shortcut.variables.shortcuts.conf.tx_sfeventmgt_domain_model_event < tt_content.shortcut.20.conf.tx_sfeventmgt_domain_model_event

#==============================================
# Page Title provider
#==============================================
config.pageTitleProviders {
    tx_sfeventmgt {
        provider = DERHANSEN\SfEventMgt\PageTitle\EventPageTitleProvider
        before = record
    }
}
